BUILD_NUMBER=$(shell cat BUILD.num)

BUILD_DIR ?= ./build

TARGET_DIR ?= ./app
COMPONENTS_DIR = ./component
SOURCES_DIR = .

ARCH ?= ESP8266
CC = xtensa-lx106-elf-gcc

SIZE = xtensa-lx106-elf-size
ESPTOOL = esptool.py

VPATH = react:app:component

SOURCES := $(shell find $(SOURCES_DIR) \( -name "*.c" -or -name "*.s" \) -and -not -path "./third_party/*")
OBJECTS ?= $(SOURCES:%.c=%.o)
DEPENDENCIES := $(OBJECTS:.o=.d)

INCLUDE_DIRS := $(shell find $(SOURCES_DIR) -type f \( -name '*.c' -or -name '*.s' \) -and -not -path "./third_party/*" | sed -E 's|\/[^\/]+$$||' |sort -u)
INCLUDE_FLAGS := $(addprefix -I, $(INCLUDE_DIRS))
INCLUDE_FLAGS += -mlongcalls -I./third_party/simavr/simavr/sim -I./third_party/simavr/simavr/ -I./third_party/simavr/include -I/usr/local/include/simavr

TARGET_SOURCES = $(wildcard $(TARGET_DIR)/*.c $(TARGET_DIR)/**/*.c)
TARGET_OBJECTS = $(patsubst %.c, %.o, \
			   $(TARGET_SOURCES))
TARGET ?= $(patsubst %.c, %, \
		 	$(TARGET_SOURCES))
PRODUCT_NAME ?= unnamed

COMPONENTS_SOURCES = $(shell find $(COMPONENTS_DIR) -name "*.c" -or -name "*.s")
COMPONENTS = $(patsubst %.c, %.o, \
			 	$(COMPONENTS_SOURCES))

MACHINE_FLAGS = -DF_CPU=$(CLOCK)
OPTIMIZATION_FLAGS ?=
DEBUG_FLAGS ?=
DEFINE_COMPUTED ?=
DEFINE_FLAGS = $(DEFINE_COMPUTED) -DBUILD_NUM=$(BUILD_NUMBER) -DARCH_$(ARCH)=1 -DPRODUCT_NAME=$(PRODUCT_NAME) -DTIMESTAMP=$(shell date +%s)
CFLAGS ?= -std=c99 -ggdb -O0 -Wall $(OPTIMIZATION_FLAGS) $(DEBUG_FLAGS) $(DEFINE_FLAGS) $(MACHINE_FLAGS)
LDFLAGS= -L$(SDK_BASE)/lib  -T$(SDK_BASE)/ld/eagle.app.v6.ld
LDLIBS=-nostdlib -Wl,--start-group -lmain -lnet80211 -lwpa -llwip -lpp -lphy -lc -Wl,--end-group -lgcc
COMPILE = $(CC) $(CFLAGS)

%.elf: $(OBJECTS)
	@echo $(DEPENDENCIES)
	$(CC) $(LDFLAGS) -ggdb  -o $*.elf $(OBJECTS) $(LDLIBS)
	$(SIZE)  $*.elf
	$(ESPTOOL) elf2image $*.elf

%.e.c: %.c
	@echo "Processing $*.c"
	$(COMPILE) -c $*.c -o $@.expanded $(INCLUDE_FLAGS) -E
	grep ^[^\#].*$  $@.expanded > $@.unformatted
	clang-format $@.unformatted > $@
	rm $@.*

%.o: %.c
	@echo "Make object for $@"
	$(CC) $(CFLAGS) -c -o $@ $< $(INCLUDE_FLAGS)

%.d: %.c
	$(CC) $(CFLAGS) $< -MM $(INCLUDE_FLAGS) > $@

clean:
	rm -rf $(DEPENDENCIES) $(TARGET).elf $(OBJECTS) $(TARGET).elf-0x?0000.bin
	find . -type f -name '*.map' -or -name '*.sym' -or -name '*.ihx' -or -name '*.asm' -or -name '*.rst' -or -name '*.rel' -or -name '*.lst' -or -name '*.elf' -or -name '*.e.c' -or -name '*.hex' | xargs rm -rf


MKDIR_P ?= mkdir -p

